{"version":3,"sources":["touch.js"],"names":["$","swipeDirection","x1","x2","y1","y2","Math","abs","longTap","longTapTimeout","touch","last","el","trigger","cancelLongTap","clearTimeout","cancelAll","touchTimeout","tapTimeout","swipeTimeout","isPrimaryTouch","event","pointerType","MSPOINTER_TYPE_TOUCH","isPrimary","isPointerEventType","e","type","toLowerCase","gesture","longTapDelay","document","ready","now","delta","firstTouch","_isPointerType","deltaX","deltaY","window","MSGesture","target","body","bind","swipeDirectionFromVelocity","velocityX","velocityY","on","touches","length","undefined","Date","parentNode","pageX","pageY","isDoubleTap","setTimeout","addPointer","pointerId","Event","cancelTouch","forEach","eventName","fn","callback","this","Zepto"],"mappings":"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","file":"touch.js","sourcesContent":["//     Zepto.js\n//     (c) 2010-2014 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n;(function($){\n  var touch = {},\n    touchTimeout, tapTimeout, swipeTimeout, longTapTimeout,\n    longTapDelay = 750,\n    gesture\n\n  function swipeDirection(x1, x2, y1, y2) {\n    return Math.abs(x1 - x2) >=\n      Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down')\n  }\n\n  function longTap() {\n    longTapTimeout = null\n    if (touch.last) {\n      touch.el.trigger('longTap')\n      touch = {}\n    }\n  }\n\n  function cancelLongTap() {\n    if (longTapTimeout) clearTimeout(longTapTimeout)\n    longTapTimeout = null\n  }\n\n  function cancelAll() {\n    if (touchTimeout) clearTimeout(touchTimeout)\n    if (tapTimeout) clearTimeout(tapTimeout)\n    if (swipeTimeout) clearTimeout(swipeTimeout)\n    if (longTapTimeout) clearTimeout(longTapTimeout)\n    touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null\n    touch = {}\n  }\n\n  function isPrimaryTouch(event){\n    return (event.pointerType == 'touch' ||\n      event.pointerType == event.MSPOINTER_TYPE_TOUCH)\n      && event.isPrimary\n  }\n\n  function isPointerEventType(e, type){\n    return (e.type == 'pointer'+type ||\n      e.type.toLowerCase() == 'mspointer'+type)\n  }\n\n  $(document).ready(function(){\n    var now, delta, deltaX = 0, deltaY = 0, firstTouch, _isPointerType\n\n    if ('MSGesture' in window) {\n      gesture = new MSGesture()\n      gesture.target = document.body\n    }\n\n    $(document)\n      .bind('MSGestureEnd', function(e){\n        var swipeDirectionFromVelocity =\n          e.velocityX > 1 ? 'Right' : e.velocityX < -1 ? 'Left' : e.velocityY > 1 ? 'Down' : e.velocityY < -1 ? 'Up' : null;\n        if (swipeDirectionFromVelocity) {\n          touch.el.trigger('swipe')\n          touch.el.trigger('swipe'+ swipeDirectionFromVelocity)\n        }\n      })\n      .on('touchstart MSPointerDown pointerdown', function(e){\n        if((_isPointerType = isPointerEventType(e, 'down')) &&\n          !isPrimaryTouch(e)) return\n        firstTouch = _isPointerType ? e : e.touches[0]\n        if (e.touches && e.touches.length === 1 && touch.x2) {\n          // Clear out touch movement data if we have it sticking around\n          // This can occur if touchcancel doesn't fire due to preventDefault, etc.\n          touch.x2 = undefined\n          touch.y2 = undefined\n        }\n        now = Date.now()\n        delta = now - (touch.last || now)\n        touch.el = $('tagName' in firstTouch.target ?\n          firstTouch.target : firstTouch.target.parentNode)\n        touchTimeout && clearTimeout(touchTimeout)\n        touch.x1 = firstTouch.pageX\n        touch.y1 = firstTouch.pageY\n        if (delta > 0 && delta <= 250) touch.isDoubleTap = true\n        touch.last = now\n        longTapTimeout = setTimeout(longTap, longTapDelay)\n        // adds the current touch contact for IE gesture recognition\n        if (gesture && _isPointerType) gesture.addPointer(e.pointerId);\n      })\n      .on('touchmove MSPointerMove pointermove', function(e){\n        if((_isPointerType = isPointerEventType(e, 'move')) &&\n          !isPrimaryTouch(e)) return\n        firstTouch = _isPointerType ? e : e.touches[0]\n        cancelLongTap()\n        touch.x2 = firstTouch.pageX\n        touch.y2 = firstTouch.pageY\n\n        deltaX += Math.abs(touch.x1 - touch.x2)\n        deltaY += Math.abs(touch.y1 - touch.y2)\n      })\n      .on('touchend MSPointerUp pointerup', function(e){\n        if((_isPointerType = isPointerEventType(e, 'up')) &&\n          !isPrimaryTouch(e)) return\n        cancelLongTap()\n\n        // swipe\n        if ((touch.x2 && Math.abs(touch.x1 - touch.x2) > 30) ||\n            (touch.y2 && Math.abs(touch.y1 - touch.y2) > 30))\n\n          swipeTimeout = setTimeout(function() {\n            touch.el.trigger('swipe')\n            touch.el.trigger('swipe' + (swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2)))\n            touch = {}\n          }, 0)\n\n        // normal tap\n        else if ('last' in touch)\n          // don't fire tap when delta position changed by more than 30 pixels,\n          // for instance when moving to a point and back to origin\n          if (deltaX < 30 && deltaY < 30) {\n            // delay by one tick so we can cancel the 'tap' event if 'scroll' fires\n            // ('tap' fires before 'scroll')\n            tapTimeout = setTimeout(function() {\n\n              // trigger universal 'tap' with the option to cancelTouch()\n              // (cancelTouch cancels processing of single vs double taps for faster 'tap' response)\n              var event = $.Event('tap')\n              event.cancelTouch = cancelAll\n              touch.el.trigger(event)\n\n              // trigger double tap immediately\n              if (touch.isDoubleTap) {\n                if (touch.el) touch.el.trigger('doubleTap')\n                touch = {}\n              }\n\n              // trigger single tap after 250ms of inactivity\n              else {\n                touchTimeout = setTimeout(function(){\n                  touchTimeout = null\n                  if (touch.el) touch.el.trigger('singleTap')\n                  touch = {}\n                }, 250)\n              }\n            }, 0)\n          } else {\n            touch = {}\n          }\n          deltaX = deltaY = 0\n\n      })\n      // when the browser window loses focus,\n      // for example when a modal dialog is shown,\n      // cancel all ongoing events\n      .on('touchcancel MSPointerCancel pointercancel', cancelAll)\n\n    // scrolling the window indicates intention of the user\n    // to scroll, not tap or swipe, so cancel all ongoing events\n    $(window).on('scroll', cancelAll)\n  })\n\n  ;['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown',\n    'doubleTap', 'tap', 'singleTap', 'longTap'].forEach(function(eventName){\n    $.fn[eventName] = function(callback){ return this.on(eventName, callback) }\n  })\n})(Zepto)\n"],"sourceRoot":"/source/"}