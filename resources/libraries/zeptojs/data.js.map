{"version":3,"sources":["data.js"],"names":["$","getData","node","name","id","exp","store","data","undefined","setData","camelName","camelize","dataAttr","call","value","uuid","attributeData","each","attributes","emptyArray","i","attr","indexOf","replace","zepto","deserializeValue","fn","camelCase","expando","Date","isPlainObject","this","key","removeData","names","split","forEach","methodName","origFn","elements","find","add","Zepto"],"mappings":"CAMC,SAAUA,GAQT,QAASC,GAAQC,EAAMC,GACrB,GAAIC,GAAKF,EAAKG,GAAMC,EAAQF,GAAMG,EAAKH,EACvC,IAAaI,SAATL,EAAoB,MAAOG,IAASG,EAAQP,EAE9C,IAAII,EAAO,CACT,GAAIH,IAAQG,GAAO,MAAOA,GAAMH,EAChC,IAAIO,GAAYC,EAASR,EACzB,IAAIO,IAAaJ,GAAO,MAAOA,GAAMI,GAEvC,MAAOE,GAASC,KAAKb,EAAEE,GAAOC,GAKlC,QAASM,GAAQP,EAAMC,EAAMW,GAC3B,GAAIV,GAAKF,EAAKG,KAASH,EAAKG,KAASL,EAAEe,MACrCT,EAAQC,EAAKH,KAAQG,EAAKH,GAAMY,EAAcd,GAEhD,OADaM,UAATL,IAAoBG,EAAMK,EAASR,IAASW,GACzCR,EAIT,QAASU,GAAcd,GACrB,GAAII,KAMJ,OALAN,GAAEiB,KAAKf,EAAKgB,YAAcC,EAAY,SAASC,EAAGC,GACd,GAA9BA,EAAKlB,KAAKmB,QAAQ,WACpBhB,EAAMK,EAASU,EAAKlB,KAAKoB,QAAQ,QAAS,MACxCvB,EAAEwB,MAAMC,iBAAiBJ,EAAKP,UAE7BR,EApCT,GAAIC,MAAWK,EAAWZ,EAAE0B,GAAGnB,KAAMI,EAAWX,EAAE2B,UAChDtB,EAAML,EAAE4B,QAAU,UAAY,GAAIC,MAASV,IAsC7CnB,GAAE0B,GAAGnB,KAAO,SAASJ,EAAMW,GACzB,MAAiBN,UAAVM,EAELd,EAAE8B,cAAc3B,GACd4B,KAAKd,KAAK,SAASG,EAAGlB,GACpBF,EAAEiB,KAAKd,EAAM,SAAS6B,EAAKlB,GAAQL,EAAQP,EAAM8B,EAAKlB,OAGvD,IAAKiB,MAAO9B,EAAQ8B,KAAK,GAAI5B,GAAQK,OAExCuB,KAAKd,KAAK,WAAYR,EAAQsB,KAAM5B,EAAMW,MAG9Cd,EAAE0B,GAAGO,WAAa,SAASC,GAEzB,MADoB,gBAATA,KAAmBA,EAAQA,EAAMC,MAAM,QAC3CJ,KAAKd,KAAK,WACf,GAAIb,GAAK2B,KAAK1B,GAAMC,EAAQF,GAAMG,EAAKH,EACnCE,IAAON,EAAEiB,KAAKiB,GAAS5B,EAAO,SAAS0B,SAClC1B,GAAM4B,EAAQvB,EAASoB,MAAQC,SAM1C,SAAU,SAASI,QAAQ,SAASC,GACpC,GAAIC,GAAStC,EAAE0B,GAAGW,EAClBrC,GAAE0B,GAAGW,GAAc,WACjB,GAAIE,GAAWR,KAAKS,KAAK,IAGzB,OAFmB,WAAfH,IAAyBE,EAAWA,EAASE,IAAIV,OACrDQ,EAASN,aACFK,EAAOzB,KAAKkB,UAGtBW","file":"data.js","sourcesContent":["//     Zepto.js\n//     (c) 2010-2014 Thomas Fuchs\n//     Zepto.js may be freely distributed under the MIT license.\n\n// The following code is heavily inspired by jQuery's $.fn.data()\n\n;(function($){\n  var data = {}, dataAttr = $.fn.data, camelize = $.camelCase,\n    exp = $.expando = 'Zepto' + (+new Date()), emptyArray = []\n\n  // Get value from node:\n  // 1. first try key as given,\n  // 2. then try camelized key,\n  // 3. fall back to reading \"data-*\" attribute.\n  function getData(node, name) {\n    var id = node[exp], store = id && data[id]\n    if (name === undefined) return store || setData(node)\n    else {\n      if (store) {\n        if (name in store) return store[name]\n        var camelName = camelize(name)\n        if (camelName in store) return store[camelName]\n      }\n      return dataAttr.call($(node), name)\n    }\n  }\n\n  // Store value under camelized key on node\n  function setData(node, name, value) {\n    var id = node[exp] || (node[exp] = ++$.uuid),\n      store = data[id] || (data[id] = attributeData(node))\n    if (name !== undefined) store[camelize(name)] = value\n    return store\n  }\n\n  // Read all \"data-*\" attributes from a node\n  function attributeData(node) {\n    var store = {}\n    $.each(node.attributes || emptyArray, function(i, attr){\n      if (attr.name.indexOf('data-') == 0)\n        store[camelize(attr.name.replace('data-', ''))] =\n          $.zepto.deserializeValue(attr.value)\n    })\n    return store\n  }\n\n  $.fn.data = function(name, value) {\n    return value === undefined ?\n      // set multiple values via object\n      $.isPlainObject(name) ?\n        this.each(function(i, node){\n          $.each(name, function(key, value){ setData(node, key, value) })\n        }) :\n        // get value from first element\n        (0 in this ? getData(this[0], name) : undefined) :\n      // set value on all elements\n      this.each(function(){ setData(this, name, value) })\n  }\n\n  $.fn.removeData = function(names) {\n    if (typeof names == 'string') names = names.split(/\\s+/)\n    return this.each(function(){\n      var id = this[exp], store = id && data[id]\n      if (store) $.each(names || store, function(key){\n        delete store[names ? camelize(this) : key]\n      })\n    })\n  }\n\n  // Generate extended `remove` and `empty` functions\n  ;['remove', 'empty'].forEach(function(methodName){\n    var origFn = $.fn[methodName]\n    $.fn[methodName] = function() {\n      var elements = this.find('*')\n      if (methodName === 'remove') elements = elements.add(this)\n      elements.removeData()\n      return origFn.call(this)\n    }\n  })\n})(Zepto)\n"],"sourceRoot":"/source/"}